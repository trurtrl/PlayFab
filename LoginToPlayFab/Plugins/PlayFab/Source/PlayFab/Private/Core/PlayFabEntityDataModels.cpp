// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!

#include "Core/PlayFabEntityDataModels.h"
#include "Core/PlayFabJsonHelpers.h"

using namespace PlayFab;
using namespace PlayFab::EntityModels;

void PlayFab::EntityModels::writeEntityTypesEnumJSON(EntityTypes enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case EntityTypestitle: writer->WriteValue(TEXT("title")); break;
    case EntityTypesmaster_player_account: writer->WriteValue(TEXT("master_player_account")); break;
    case EntityTypestitle_player_account: writer->WriteValue(TEXT("title_player_account")); break;
    case EntityTypescharacter: writer->WriteValue(TEXT("character")); break;
    case EntityTypesgroup: writer->WriteValue(TEXT("group")); break;
    }
}

EntityModels::EntityTypes PlayFab::EntityModels::readEntityTypesFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readEntityTypesFromValue(value.IsValid() ? value->AsString() : "");
}

EntityModels::EntityTypes PlayFab::EntityModels::readEntityTypesFromValue(const FString& value)
{
    static TMap<FString, EntityTypes> _EntityTypesMap;
    if (_EntityTypesMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _EntityTypesMap.Add(TEXT("title"), EntityTypestitle);
        _EntityTypesMap.Add(TEXT("master_player_account"), EntityTypesmaster_player_account);
        _EntityTypesMap.Add(TEXT("title_player_account"), EntityTypestitle_player_account);
        _EntityTypesMap.Add(TEXT("character"), EntityTypescharacter);
        _EntityTypesMap.Add(TEXT("group"), EntityTypesgroup);

    }

    if (!value.IsEmpty())
    {
        auto output = _EntityTypesMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return EntityTypestitle; // Basically critical fail
}

PlayFab::EntityModels::FEntityKey::~FEntityKey()
{

}

void PlayFab::EntityModels::FEntityKey::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Id")); writer->WriteValue(Id);

    if (Type.notNull()) { writer->WriteIdentifierPrefix(TEXT("Type")); writeEntityTypesEnumJSON(Type, writer); }

    if (TypeString.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("TypeString")); writer->WriteValue(TypeString); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FEntityKey::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IdValue = obj->TryGetField(TEXT("Id"));
    if (IdValue.IsValid() && !IdValue->IsNull())
    {
        FString TmpValue;
        if (IdValue->TryGetString(TmpValue)) { Id = TmpValue; }
    }

    Type = readEntityTypesFromValue(obj->TryGetField(TEXT("Type")));

    const TSharedPtr<FJsonValue> TypeStringValue = obj->TryGetField(TEXT("TypeString"));
    if (TypeStringValue.IsValid() && !TypeStringValue->IsNull())
    {
        FString TmpValue;
        if (TypeStringValue->TryGetString(TmpValue)) { TypeString = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FAbortFileUploadsRequest::~FAbortFileUploadsRequest()
{

}

void PlayFab::EntityModels::FAbortFileUploadsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    writer->WriteArrayStart(TEXT("FileNames"));
    for (const FString& item : FileNames)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    if (ProfileVersion.notNull()) { writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FAbortFileUploadsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("FileNames"), FileNames);

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FAbortFileUploadsResponse::~FAbortFileUploadsResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FAbortFileUploadsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FAbortFileUploadsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FAcceptGroupApplicationRequest::~FAcceptGroupApplicationRequest()
{

}

void PlayFab::EntityModels::FAcceptGroupApplicationRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FAcceptGroupApplicationRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FAcceptGroupInvitationRequest::~FAcceptGroupInvitationRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FAcceptGroupInvitationRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FAcceptGroupInvitationRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FAddMembersRequest::~FAddMembersRequest()
{

}

void PlayFab::EntityModels::FAddMembersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteArrayStart(TEXT("Members"));
    for (const FEntityKey& item : Members)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    if (RoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleId")); writer->WriteValue(RoleId); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FAddMembersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TArray<TSharedPtr<FJsonValue>>&MembersArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Members"));
    for (int32 Idx = 0; Idx < MembersArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = MembersArray[Idx];
        Members.Add(FEntityKey(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FApplyToGroupRequest::~FApplyToGroupRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FApplyToGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AutoAcceptOutstandingInvite.notNull()) { writer->WriteIdentifierPrefix(TEXT("AutoAcceptOutstandingInvite")); writer->WriteValue(AutoAcceptOutstandingInvite); }

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FApplyToGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AutoAcceptOutstandingInviteValue = obj->TryGetField(TEXT("AutoAcceptOutstandingInvite"));
    if (AutoAcceptOutstandingInviteValue.IsValid() && !AutoAcceptOutstandingInviteValue->IsNull())
    {
        bool TmpValue;
        if (AutoAcceptOutstandingInviteValue->TryGetBool(TmpValue)) { AutoAcceptOutstandingInvite = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FEntityWithLineage::~FEntityWithLineage()
{
    //if (Key != nullptr) delete Key;

}

void PlayFab::EntityModels::FEntityWithLineage::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Key.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Key")); Key->writeJSON(writer); }

    if (Lineage.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Lineage"));
        for (TMap<FString, FEntityKey>::TConstIterator It(Lineage); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FEntityWithLineage::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> KeyValue = obj->TryGetField(TEXT("Key"));
    if (KeyValue.IsValid() && !KeyValue->IsNull())
    {
        Key = MakeShareable(new FEntityKey(KeyValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* LineageObject;
    if (obj->TryGetObjectField(TEXT("Lineage"), LineageObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*LineageObject)->Values); It; ++It)
        {
            Lineage.Add(It.Key(), FEntityKey(It.Value()->AsObject()));
        }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FApplyToGroupResponse::~FApplyToGroupResponse()
{
    //if (Entity != nullptr) delete Entity;
    //if (Group != nullptr) delete Group;

}

void PlayFab::EntityModels::FApplyToGroupResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    writer->WriteIdentifierPrefix(TEXT("Expires")); writeDatetime(Expires, writer);

    if (Group.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Group")); Group->writeJSON(writer); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FApplyToGroupResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityWithLineage(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ExpiresValue = obj->TryGetField(TEXT("Expires"));
    if (ExpiresValue.IsValid())
        Expires = readDatetime(ExpiresValue);


    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = MakeShareable(new FEntityKey(GroupValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FBlockEntityRequest::~FBlockEntityRequest()
{

}

void PlayFab::EntityModels::FBlockEntityRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FBlockEntityRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FChangeMemberRoleRequest::~FChangeMemberRoleRequest()
{

}

void PlayFab::EntityModels::FChangeMemberRoleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DestinationRoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("DestinationRoleId")); writer->WriteValue(DestinationRoleId); }

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteArrayStart(TEXT("Members"));
    for (const FEntityKey& item : Members)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteIdentifierPrefix(TEXT("OriginRoleId")); writer->WriteValue(OriginRoleId);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FChangeMemberRoleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DestinationRoleIdValue = obj->TryGetField(TEXT("DestinationRoleId"));
    if (DestinationRoleIdValue.IsValid() && !DestinationRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (DestinationRoleIdValue->TryGetString(TmpValue)) { DestinationRoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TArray<TSharedPtr<FJsonValue>>&MembersArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Members"));
    for (int32 Idx = 0; Idx < MembersArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = MembersArray[Idx];
        Members.Add(FEntityKey(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> OriginRoleIdValue = obj->TryGetField(TEXT("OriginRoleId"));
    if (OriginRoleIdValue.IsValid() && !OriginRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (OriginRoleIdValue->TryGetString(TmpValue)) { OriginRoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FCreateGroupRequest::~FCreateGroupRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FCreateGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    writer->WriteIdentifierPrefix(TEXT("GroupName")); writer->WriteValue(GroupName);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FCreateGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GroupNameValue = obj->TryGetField(TEXT("GroupName"));
    if (GroupNameValue.IsValid() && !GroupNameValue->IsNull())
    {
        FString TmpValue;
        if (GroupNameValue->TryGetString(TmpValue)) { GroupName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FCreateGroupResponse::~FCreateGroupResponse()
{

}

void PlayFab::EntityModels::FCreateGroupResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdminRoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("AdminRoleId")); writer->WriteValue(AdminRoleId); }

    writer->WriteIdentifierPrefix(TEXT("Created")); writeDatetime(Created, writer);

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    if (GroupName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("GroupName")); writer->WriteValue(GroupName); }

    if (MemberRoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("MemberRoleId")); writer->WriteValue(MemberRoleId); }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion);

    if (Roles.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Roles"));
        for (TMap<FString, FString>::TConstIterator It(Roles); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FCreateGroupResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AdminRoleIdValue = obj->TryGetField(TEXT("AdminRoleId"));
    if (AdminRoleIdValue.IsValid() && !AdminRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (AdminRoleIdValue->TryGetString(TmpValue)) { AdminRoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupNameValue = obj->TryGetField(TEXT("GroupName"));
    if (GroupNameValue.IsValid() && !GroupNameValue->IsNull())
    {
        FString TmpValue;
        if (GroupNameValue->TryGetString(TmpValue)) { GroupName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MemberRoleIdValue = obj->TryGetField(TEXT("MemberRoleId"));
    if (MemberRoleIdValue.IsValid() && !MemberRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (MemberRoleIdValue->TryGetString(TmpValue)) { MemberRoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* RolesObject;
    if (obj->TryGetObjectField(TEXT("Roles"), RolesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*RolesObject)->Values); It; ++It)
        {
            Roles.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FCreateGroupRoleRequest::~FCreateGroupRoleRequest()
{

}

void PlayFab::EntityModels::FCreateGroupRoleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("RoleId")); writer->WriteValue(RoleId);

    writer->WriteIdentifierPrefix(TEXT("RoleName")); writer->WriteValue(RoleName);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FCreateGroupRoleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RoleNameValue = obj->TryGetField(TEXT("RoleName"));
    if (RoleNameValue.IsValid() && !RoleNameValue->IsNull())
    {
        FString TmpValue;
        if (RoleNameValue->TryGetString(TmpValue)) { RoleName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FCreateGroupRoleResponse::~FCreateGroupRoleResponse()
{

}

void PlayFab::EntityModels::FCreateGroupRoleResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion);

    if (RoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleId")); writer->WriteValue(RoleId); }

    if (RoleName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleName")); writer->WriteValue(RoleName); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FCreateGroupRoleResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RoleNameValue = obj->TryGetField(TEXT("RoleName"));
    if (RoleNameValue.IsValid() && !RoleNameValue->IsNull())
    {
        FString TmpValue;
        if (RoleNameValue->TryGetString(TmpValue)) { RoleName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FDeleteFilesRequest::~FDeleteFilesRequest()
{

}

void PlayFab::EntityModels::FDeleteFilesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    writer->WriteArrayStart(TEXT("FileNames"));
    for (const FString& item : FileNames)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    if (ProfileVersion.notNull()) { writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FDeleteFilesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("FileNames"), FileNames);

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FDeleteFilesResponse::~FDeleteFilesResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FDeleteFilesResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FDeleteFilesResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FDeleteGroupRequest::~FDeleteGroupRequest()
{

}

void PlayFab::EntityModels::FDeleteGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FDeleteGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FDeleteRoleRequest::~FDeleteRoleRequest()
{

}

void PlayFab::EntityModels::FDeleteRoleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    if (RoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleId")); writer->WriteValue(RoleId); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FDeleteRoleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

void PlayFab::EntityModels::writeEffectTypeEnumJSON(EffectType enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case EffectTypeAllow: writer->WriteValue(TEXT("Allow")); break;
    case EffectTypeDeny: writer->WriteValue(TEXT("Deny")); break;
    }
}

EntityModels::EffectType PlayFab::EntityModels::readEffectTypeFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readEffectTypeFromValue(value.IsValid() ? value->AsString() : "");
}

EntityModels::EffectType PlayFab::EntityModels::readEffectTypeFromValue(const FString& value)
{
    static TMap<FString, EffectType> _EffectTypeMap;
    if (_EffectTypeMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _EffectTypeMap.Add(TEXT("Allow"), EffectTypeAllow);
        _EffectTypeMap.Add(TEXT("Deny"), EffectTypeDeny);

    }

    if (!value.IsEmpty())
    {
        auto output = _EffectTypeMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return EffectTypeAllow; // Basically critical fail
}

PlayFab::EntityModels::FEmptyResult::~FEmptyResult()
{

}

void PlayFab::EntityModels::FEmptyResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FEmptyResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EntityModels::FEntityDataObject::~FEntityDataObject()
{

}

void PlayFab::EntityModels::FEntityDataObject::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DataObject.notNull()) { writer->WriteIdentifierPrefix(TEXT("DataObject")); DataObject.writeJSON(writer); }

    if (EscapedDataObject.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("EscapedDataObject")); writer->WriteValue(EscapedDataObject); }

    if (ObjectName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("ObjectName")); writer->WriteValue(ObjectName); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FEntityDataObject::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataObjectValue = obj->TryGetField(TEXT("DataObject"));
    if (DataObjectValue.IsValid() && !DataObjectValue->IsNull())
    {
        DataObject = FJsonKeeper(DataObjectValue);
    }

    const TSharedPtr<FJsonValue> EscapedDataObjectValue = obj->TryGetField(TEXT("EscapedDataObject"));
    if (EscapedDataObjectValue.IsValid() && !EscapedDataObjectValue->IsNull())
    {
        FString TmpValue;
        if (EscapedDataObjectValue->TryGetString(TmpValue)) { EscapedDataObject = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ObjectNameValue = obj->TryGetField(TEXT("ObjectName"));
    if (ObjectNameValue.IsValid() && !ObjectNameValue->IsNull())
    {
        FString TmpValue;
        if (ObjectNameValue->TryGetString(TmpValue)) { ObjectName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FEntityMemberRole::~FEntityMemberRole()
{

}

void PlayFab::EntityModels::FEntityMemberRole::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Members.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Members"));
        for (const FEntityWithLineage& item : Members)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (RoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleId")); writer->WriteValue(RoleId); }

    if (RoleName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleName")); writer->WriteValue(RoleName); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FEntityMemberRole::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&MembersArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Members"));
    for (int32 Idx = 0; Idx < MembersArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = MembersArray[Idx];
        Members.Add(FEntityWithLineage(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RoleNameValue = obj->TryGetField(TEXT("RoleName"));
    if (RoleNameValue.IsValid() && !RoleNameValue->IsNull())
    {
        FString TmpValue;
        if (RoleNameValue->TryGetString(TmpValue)) { RoleName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FEntityPermissionStatement::~FEntityPermissionStatement()
{

}

void PlayFab::EntityModels::FEntityPermissionStatement::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Action")); writer->WriteValue(Action);

    if (Comment.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("Comment")); writer->WriteValue(Comment); }

    if (Condition.notNull()) { writer->WriteIdentifierPrefix(TEXT("Condition")); Condition.writeJSON(writer); }

    writer->WriteIdentifierPrefix(TEXT("Effect")); writeEffectTypeEnumJSON(Effect, writer);

    writer->WriteIdentifierPrefix(TEXT("Principal")); Principal.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Resource")); writer->WriteValue(Resource);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FEntityPermissionStatement::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ActionValue = obj->TryGetField(TEXT("Action"));
    if (ActionValue.IsValid() && !ActionValue->IsNull())
    {
        FString TmpValue;
        if (ActionValue->TryGetString(TmpValue)) { Action = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CommentValue = obj->TryGetField(TEXT("Comment"));
    if (CommentValue.IsValid() && !CommentValue->IsNull())
    {
        FString TmpValue;
        if (CommentValue->TryGetString(TmpValue)) { Comment = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ConditionValue = obj->TryGetField(TEXT("Condition"));
    if (ConditionValue.IsValid() && !ConditionValue->IsNull())
    {
        Condition = FJsonKeeper(ConditionValue);
    }

    Effect = readEffectTypeFromValue(obj->TryGetField(TEXT("Effect")));

    const TSharedPtr<FJsonValue> PrincipalValue = obj->TryGetField(TEXT("Principal"));
    if (PrincipalValue.IsValid() && !PrincipalValue->IsNull())
    {
        Principal = FJsonKeeper(PrincipalValue);
    }

    const TSharedPtr<FJsonValue> ResourceValue = obj->TryGetField(TEXT("Resource"));
    if (ResourceValue.IsValid() && !ResourceValue->IsNull())
    {
        FString TmpValue;
        if (ResourceValue->TryGetString(TmpValue)) { Resource = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FEntityProfileFileMetadata::~FEntityProfileFileMetadata()
{

}

void PlayFab::EntityModels::FEntityProfileFileMetadata::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Checksum.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("Checksum")); writer->WriteValue(Checksum); }

    if (FileName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("FileName")); writer->WriteValue(FileName); }

    writer->WriteIdentifierPrefix(TEXT("LastModified")); writeDatetime(LastModified, writer);

    writer->WriteIdentifierPrefix(TEXT("Size")); writer->WriteValue(Size);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FEntityProfileFileMetadata::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ChecksumValue = obj->TryGetField(TEXT("Checksum"));
    if (ChecksumValue.IsValid() && !ChecksumValue->IsNull())
    {
        FString TmpValue;
        if (ChecksumValue->TryGetString(TmpValue)) { Checksum = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FileNameValue = obj->TryGetField(TEXT("FileName"));
    if (FileNameValue.IsValid() && !FileNameValue->IsNull())
    {
        FString TmpValue;
        if (FileNameValue->TryGetString(TmpValue)) { FileName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LastModifiedValue = obj->TryGetField(TEXT("LastModified"));
    if (LastModifiedValue.IsValid())
        LastModified = readDatetime(LastModifiedValue);


    const TSharedPtr<FJsonValue> SizeValue = obj->TryGetField(TEXT("Size"));
    if (SizeValue.IsValid() && !SizeValue->IsNull())
    {
        int32 TmpValue;
        if (SizeValue->TryGetNumber(TmpValue)) { Size = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FEntityProfileBody::~FEntityProfileBody()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FEntityProfileBody::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    if (EntityChain.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("EntityChain")); writer->WriteValue(EntityChain); }

    if (Files.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Files"));
        for (TMap<FString, FEntityProfileFileMetadata>::TConstIterator It(Files); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (Objects.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Objects"));
        for (TMap<FString, FEntityDataObject>::TConstIterator It(Objects); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    if (Permissions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Permissions"));
        for (const FEntityPermissionStatement& item : Permissions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteIdentifierPrefix(TEXT("VersionNumber")); writer->WriteValue(VersionNumber);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FEntityProfileBody::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> EntityChainValue = obj->TryGetField(TEXT("EntityChain"));
    if (EntityChainValue.IsValid() && !EntityChainValue->IsNull())
    {
        FString TmpValue;
        if (EntityChainValue->TryGetString(TmpValue)) { EntityChain = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* FilesObject;
    if (obj->TryGetObjectField(TEXT("Files"), FilesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*FilesObject)->Values); It; ++It)
        {
            Files.Add(It.Key(), FEntityProfileFileMetadata(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonObject>* ObjectsObject;
    if (obj->TryGetObjectField(TEXT("Objects"), ObjectsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*ObjectsObject)->Values); It; ++It)
        {
            Objects.Add(It.Key(), FEntityDataObject(It.Value()->AsObject()));
        }
    }

    const TArray<TSharedPtr<FJsonValue>>&PermissionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Permissions"));
    for (int32 Idx = 0; Idx < PermissionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PermissionsArray[Idx];
        Permissions.Add(FEntityPermissionStatement(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> VersionNumberValue = obj->TryGetField(TEXT("VersionNumber"));
    if (VersionNumberValue.IsValid() && !VersionNumberValue->IsNull())
    {
        int32 TmpValue;
        if (VersionNumberValue->TryGetNumber(TmpValue)) { VersionNumber = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FFinalizeFileUploadsRequest::~FFinalizeFileUploadsRequest()
{

}

void PlayFab::EntityModels::FFinalizeFileUploadsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    writer->WriteArrayStart(TEXT("FileNames"));
    for (const FString& item : FileNames)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FFinalizeFileUploadsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("FileNames"), FileNames);

    return HasSucceeded;
}

PlayFab::EntityModels::FGetFileMetadata::~FGetFileMetadata()
{

}

void PlayFab::EntityModels::FGetFileMetadata::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Checksum.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("Checksum")); writer->WriteValue(Checksum); }

    if (DownloadUrl.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("DownloadUrl")); writer->WriteValue(DownloadUrl); }

    if (FileName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("FileName")); writer->WriteValue(FileName); }

    writer->WriteIdentifierPrefix(TEXT("LastModified")); writeDatetime(LastModified, writer);

    writer->WriteIdentifierPrefix(TEXT("Size")); writer->WriteValue(Size);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetFileMetadata::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ChecksumValue = obj->TryGetField(TEXT("Checksum"));
    if (ChecksumValue.IsValid() && !ChecksumValue->IsNull())
    {
        FString TmpValue;
        if (ChecksumValue->TryGetString(TmpValue)) { Checksum = TmpValue; }
    }

    const TSharedPtr<FJsonValue> DownloadUrlValue = obj->TryGetField(TEXT("DownloadUrl"));
    if (DownloadUrlValue.IsValid() && !DownloadUrlValue->IsNull())
    {
        FString TmpValue;
        if (DownloadUrlValue->TryGetString(TmpValue)) { DownloadUrl = TmpValue; }
    }

    const TSharedPtr<FJsonValue> FileNameValue = obj->TryGetField(TEXT("FileName"));
    if (FileNameValue.IsValid() && !FileNameValue->IsNull())
    {
        FString TmpValue;
        if (FileNameValue->TryGetString(TmpValue)) { FileName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> LastModifiedValue = obj->TryGetField(TEXT("LastModified"));
    if (LastModifiedValue.IsValid())
        LastModified = readDatetime(LastModifiedValue);


    const TSharedPtr<FJsonValue> SizeValue = obj->TryGetField(TEXT("Size"));
    if (SizeValue.IsValid() && !SizeValue->IsNull())
    {
        int32 TmpValue;
        if (SizeValue->TryGetNumber(TmpValue)) { Size = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FFinalizeFileUploadsResponse::~FFinalizeFileUploadsResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FFinalizeFileUploadsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    if (Metadata.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Metadata"));
        for (TMap<FString, FGetFileMetadata>::TConstIterator It(Metadata); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FFinalizeFileUploadsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* MetadataObject;
    if (obj->TryGetObjectField(TEXT("Metadata"), MetadataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*MetadataObject)->Values); It; ++It)
        {
            Metadata.Add(It.Key(), FGetFileMetadata(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGetEntityProfileRequest::~FGetEntityProfileRequest()
{

}

void PlayFab::EntityModels::FGetEntityProfileRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DataAsObject.notNull()) { writer->WriteIdentifierPrefix(TEXT("DataAsObject")); writer->WriteValue(DataAsObject); }

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetEntityProfileRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataAsObjectValue = obj->TryGetField(TEXT("DataAsObject"));
    if (DataAsObjectValue.IsValid() && !DataAsObjectValue->IsNull())
    {
        bool TmpValue;
        if (DataAsObjectValue->TryGetBool(TmpValue)) { DataAsObject = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGetEntityProfileResponse::~FGetEntityProfileResponse()
{
    //if (Profile != nullptr) delete Profile;

}

void PlayFab::EntityModels::FGetEntityProfileResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Profile.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Profile")); Profile->writeJSON(writer); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetEntityProfileResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ProfileValue = obj->TryGetField(TEXT("Profile"));
    if (ProfileValue.IsValid() && !ProfileValue->IsNull())
    {
        Profile = MakeShareable(new FEntityProfileBody(ProfileValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGetEntityProfilesRequest::~FGetEntityProfilesRequest()
{

}

void PlayFab::EntityModels::FGetEntityProfilesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DataAsObject.notNull()) { writer->WriteIdentifierPrefix(TEXT("DataAsObject")); writer->WriteValue(DataAsObject); }

    writer->WriteArrayStart(TEXT("Entities"));
    for (const FEntityKey& item : Entities)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetEntityProfilesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataAsObjectValue = obj->TryGetField(TEXT("DataAsObject"));
    if (DataAsObjectValue.IsValid() && !DataAsObjectValue->IsNull())
    {
        bool TmpValue;
        if (DataAsObjectValue->TryGetBool(TmpValue)) { DataAsObject = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&EntitiesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Entities"));
    for (int32 Idx = 0; Idx < EntitiesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = EntitiesArray[Idx];
        Entities.Add(FEntityKey(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FGetEntityProfilesResponse::~FGetEntityProfilesResponse()
{

}

void PlayFab::EntityModels::FGetEntityProfilesResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Profiles.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Profiles"));
        for (const FEntityProfileBody& item : Profiles)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetEntityProfilesResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ProfilesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Profiles"));
    for (int32 Idx = 0; Idx < ProfilesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ProfilesArray[Idx];
        Profiles.Add(FEntityProfileBody(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FGetEntityTokenRequest::~FGetEntityTokenRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FGetEntityTokenRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetEntityTokenRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGetEntityTokenResponse::~FGetEntityTokenResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FGetEntityTokenResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    if (EntityToken.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("EntityToken")); writer->WriteValue(EntityToken); }

    if (TokenExpiration.notNull()) { writer->WriteIdentifierPrefix(TEXT("TokenExpiration")); writeDatetime(TokenExpiration, writer); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetEntityTokenResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> EntityTokenValue = obj->TryGetField(TEXT("EntityToken"));
    if (EntityTokenValue.IsValid() && !EntityTokenValue->IsNull())
    {
        FString TmpValue;
        if (EntityTokenValue->TryGetString(TmpValue)) { EntityToken = TmpValue; }
    }

    const TSharedPtr<FJsonValue> TokenExpirationValue = obj->TryGetField(TEXT("TokenExpiration"));
    if (TokenExpirationValue.IsValid())
        TokenExpiration = readDatetime(TokenExpirationValue);


    return HasSucceeded;
}

PlayFab::EntityModels::FGetFilesRequest::~FGetFilesRequest()
{

}

void PlayFab::EntityModels::FGetFilesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetFilesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGetFilesResponse::~FGetFilesResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FGetFilesResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    if (Metadata.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Metadata"));
        for (TMap<FString, FGetFileMetadata>::TConstIterator It(Metadata); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetFilesResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* MetadataObject;
    if (obj->TryGetObjectField(TEXT("Metadata"), MetadataObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*MetadataObject)->Values); It; ++It)
        {
            Metadata.Add(It.Key(), FGetFileMetadata(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGetGlobalPolicyRequest::~FGetGlobalPolicyRequest()
{

}

void PlayFab::EntityModels::FGetGlobalPolicyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetGlobalPolicyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EntityModels::FGetGlobalPolicyResponse::~FGetGlobalPolicyResponse()
{

}

void PlayFab::EntityModels::FGetGlobalPolicyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Permissions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Permissions"));
        for (const FEntityPermissionStatement& item : Permissions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetGlobalPolicyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&PermissionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Permissions"));
    for (int32 Idx = 0; Idx < PermissionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PermissionsArray[Idx];
        Permissions.Add(FEntityPermissionStatement(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FGetGroupRequest::~FGetGroupRequest()
{
    //if (Group != nullptr) delete Group;

}

void PlayFab::EntityModels::FGetGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Group.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Group")); Group->writeJSON(writer); }

    if (GroupName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("GroupName")); writer->WriteValue(GroupName); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = MakeShareable(new FEntityKey(GroupValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GroupNameValue = obj->TryGetField(TEXT("GroupName"));
    if (GroupNameValue.IsValid() && !GroupNameValue->IsNull())
    {
        FString TmpValue;
        if (GroupNameValue->TryGetString(TmpValue)) { GroupName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGetGroupResponse::~FGetGroupResponse()
{

}

void PlayFab::EntityModels::FGetGroupResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdminRoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("AdminRoleId")); writer->WriteValue(AdminRoleId); }

    writer->WriteIdentifierPrefix(TEXT("Created")); writeDatetime(Created, writer);

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    if (GroupName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("GroupName")); writer->WriteValue(GroupName); }

    if (MemberRoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("MemberRoleId")); writer->WriteValue(MemberRoleId); }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion);

    if (Roles.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Roles"));
        for (TMap<FString, FString>::TConstIterator It(Roles); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            writer->WriteValue((*It).Value);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetGroupResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AdminRoleIdValue = obj->TryGetField(TEXT("AdminRoleId"));
    if (AdminRoleIdValue.IsValid() && !AdminRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (AdminRoleIdValue->TryGetString(TmpValue)) { AdminRoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> CreatedValue = obj->TryGetField(TEXT("Created"));
    if (CreatedValue.IsValid())
        Created = readDatetime(CreatedValue);


    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupNameValue = obj->TryGetField(TEXT("GroupName"));
    if (GroupNameValue.IsValid() && !GroupNameValue->IsNull())
    {
        FString TmpValue;
        if (GroupNameValue->TryGetString(TmpValue)) { GroupName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MemberRoleIdValue = obj->TryGetField(TEXT("MemberRoleId"));
    if (MemberRoleIdValue.IsValid() && !MemberRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (MemberRoleIdValue->TryGetString(TmpValue)) { MemberRoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    const TSharedPtr<FJsonObject>* RolesObject;
    if (obj->TryGetObjectField(TEXT("Roles"), RolesObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*RolesObject)->Values); It; ++It)
        {
            Roles.Add(It.Key(), It.Value()->AsString());
        }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGetObjectsRequest::~FGetObjectsRequest()
{

}

void PlayFab::EntityModels::FGetObjectsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    if (EscapeObject.notNull()) { writer->WriteIdentifierPrefix(TEXT("EscapeObject")); writer->WriteValue(EscapeObject); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetObjectsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> EscapeObjectValue = obj->TryGetField(TEXT("EscapeObject"));
    if (EscapeObjectValue.IsValid() && !EscapeObjectValue->IsNull())
    {
        bool TmpValue;
        if (EscapeObjectValue->TryGetBool(TmpValue)) { EscapeObject = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FObjectResult::~FObjectResult()
{

}

void PlayFab::EntityModels::FObjectResult::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DataObject.notNull()) { writer->WriteIdentifierPrefix(TEXT("DataObject")); DataObject.writeJSON(writer); }

    if (EscapedDataObject.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("EscapedDataObject")); writer->WriteValue(EscapedDataObject); }

    if (ObjectName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("ObjectName")); writer->WriteValue(ObjectName); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FObjectResult::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataObjectValue = obj->TryGetField(TEXT("DataObject"));
    if (DataObjectValue.IsValid() && !DataObjectValue->IsNull())
    {
        DataObject = FJsonKeeper(DataObjectValue);
    }

    const TSharedPtr<FJsonValue> EscapedDataObjectValue = obj->TryGetField(TEXT("EscapedDataObject"));
    if (EscapedDataObjectValue.IsValid() && !EscapedDataObjectValue->IsNull())
    {
        FString TmpValue;
        if (EscapedDataObjectValue->TryGetString(TmpValue)) { EscapedDataObject = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ObjectNameValue = obj->TryGetField(TEXT("ObjectName"));
    if (ObjectNameValue.IsValid() && !ObjectNameValue->IsNull())
    {
        FString TmpValue;
        if (ObjectNameValue->TryGetString(TmpValue)) { ObjectName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGetObjectsResponse::~FGetObjectsResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FGetObjectsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    if (Objects.Num() != 0)
    {
        writer->WriteObjectStart(TEXT("Objects"));
        for (TMap<FString, FObjectResult>::TConstIterator It(Objects); It; ++It)
        {
            writer->WriteIdentifierPrefix((*It).Key);
            (*It).Value.writeJSON(writer);
        }
        writer->WriteObjectEnd();
    }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGetObjectsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonObject>* ObjectsObject;
    if (obj->TryGetObjectField(TEXT("Objects"), ObjectsObject))
    {
        for (TMap<FString, TSharedPtr<FJsonValue>>::TConstIterator It((*ObjectsObject)->Values); It; ++It)
        {
            Objects.Add(It.Key(), FObjectResult(It.Value()->AsObject()));
        }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGroupApplication::~FGroupApplication()
{
    //if (Entity != nullptr) delete Entity;
    //if (Group != nullptr) delete Group;

}

void PlayFab::EntityModels::FGroupApplication::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    writer->WriteIdentifierPrefix(TEXT("Expires")); writeDatetime(Expires, writer);

    if (Group.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Group")); Group->writeJSON(writer); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGroupApplication::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityWithLineage(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ExpiresValue = obj->TryGetField(TEXT("Expires"));
    if (ExpiresValue.IsValid())
        Expires = readDatetime(ExpiresValue);


    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = MakeShareable(new FEntityKey(GroupValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGroupBlock::~FGroupBlock()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FGroupBlock::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGroupBlock::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityWithLineage(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGroupInvitation::~FGroupInvitation()
{
    //if (Group != nullptr) delete Group;
    //if (InvitedByEntity != nullptr) delete InvitedByEntity;
    //if (InvitedEntity != nullptr) delete InvitedEntity;

}

void PlayFab::EntityModels::FGroupInvitation::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Expires")); writeDatetime(Expires, writer);

    if (Group.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Group")); Group->writeJSON(writer); }

    if (InvitedByEntity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("InvitedByEntity")); InvitedByEntity->writeJSON(writer); }

    if (InvitedEntity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("InvitedEntity")); InvitedEntity->writeJSON(writer); }

    if (RoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleId")); writer->WriteValue(RoleId); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGroupInvitation::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ExpiresValue = obj->TryGetField(TEXT("Expires"));
    if (ExpiresValue.IsValid())
        Expires = readDatetime(ExpiresValue);


    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = MakeShareable(new FEntityKey(GroupValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> InvitedByEntityValue = obj->TryGetField(TEXT("InvitedByEntity"));
    if (InvitedByEntityValue.IsValid() && !InvitedByEntityValue->IsNull())
    {
        InvitedByEntity = MakeShareable(new FEntityWithLineage(InvitedByEntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> InvitedEntityValue = obj->TryGetField(TEXT("InvitedEntity"));
    if (InvitedEntityValue.IsValid() && !InvitedEntityValue->IsNull())
    {
        InvitedEntity = MakeShareable(new FEntityWithLineage(InvitedEntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGroupRole::~FGroupRole()
{

}

void PlayFab::EntityModels::FGroupRole::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (RoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleId")); writer->WriteValue(RoleId); }

    if (RoleName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleName")); writer->WriteValue(RoleName); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGroupRole::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RoleNameValue = obj->TryGetField(TEXT("RoleName"));
    if (RoleNameValue.IsValid() && !RoleNameValue->IsNull())
    {
        FString TmpValue;
        if (RoleNameValue->TryGetString(TmpValue)) { RoleName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FGroupWithRoles::~FGroupWithRoles()
{
    //if (Group != nullptr) delete Group;

}

void PlayFab::EntityModels::FGroupWithRoles::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Group.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Group")); Group->writeJSON(writer); }

    if (GroupName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("GroupName")); writer->WriteValue(GroupName); }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion);

    if (Roles.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Roles"));
        for (const FGroupRole& item : Roles)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FGroupWithRoles::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = MakeShareable(new FEntityKey(GroupValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> GroupNameValue = obj->TryGetField(TEXT("GroupName"));
    if (GroupNameValue.IsValid() && !GroupNameValue->IsNull())
    {
        FString TmpValue;
        if (GroupNameValue->TryGetString(TmpValue)) { GroupName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&RolesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Roles"));
    for (int32 Idx = 0; Idx < RolesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = RolesArray[Idx];
        Roles.Add(FGroupRole(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FInitiateFileUploadMetadata::~FInitiateFileUploadMetadata()
{

}

void PlayFab::EntityModels::FInitiateFileUploadMetadata::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (FileName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("FileName")); writer->WriteValue(FileName); }

    if (UploadUrl.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("UploadUrl")); writer->WriteValue(UploadUrl); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FInitiateFileUploadMetadata::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> FileNameValue = obj->TryGetField(TEXT("FileName"));
    if (FileNameValue.IsValid() && !FileNameValue->IsNull())
    {
        FString TmpValue;
        if (FileNameValue->TryGetString(TmpValue)) { FileName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> UploadUrlValue = obj->TryGetField(TEXT("UploadUrl"));
    if (UploadUrlValue.IsValid() && !UploadUrlValue->IsNull())
    {
        FString TmpValue;
        if (UploadUrlValue->TryGetString(TmpValue)) { UploadUrl = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FInitiateFileUploadsRequest::~FInitiateFileUploadsRequest()
{

}

void PlayFab::EntityModels::FInitiateFileUploadsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    writer->WriteArrayStart(TEXT("FileNames"));
    for (const FString& item : FileNames)
        writer->WriteValue(item);
    writer->WriteArrayEnd();


    if (ProfileVersion.notNull()) { writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FInitiateFileUploadsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    HasSucceeded &= obj->TryGetStringArrayField(TEXT("FileNames"), FileNames);

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FInitiateFileUploadsResponse::~FInitiateFileUploadsResponse()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FInitiateFileUploadsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion);

    if (UploadDetails.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("UploadDetails"));
        for (const FInitiateFileUploadMetadata& item : UploadDetails)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FInitiateFileUploadsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&UploadDetailsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("UploadDetails"));
    for (int32 Idx = 0; Idx < UploadDetailsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = UploadDetailsArray[Idx];
        UploadDetails.Add(FInitiateFileUploadMetadata(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FInviteToGroupRequest::~FInviteToGroupRequest()
{

}

void PlayFab::EntityModels::FInviteToGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AutoAcceptOutstandingApplication.notNull()) { writer->WriteIdentifierPrefix(TEXT("AutoAcceptOutstandingApplication")); writer->WriteValue(AutoAcceptOutstandingApplication); }

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    if (RoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleId")); writer->WriteValue(RoleId); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FInviteToGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AutoAcceptOutstandingApplicationValue = obj->TryGetField(TEXT("AutoAcceptOutstandingApplication"));
    if (AutoAcceptOutstandingApplicationValue.IsValid() && !AutoAcceptOutstandingApplicationValue->IsNull())
    {
        bool TmpValue;
        if (AutoAcceptOutstandingApplicationValue->TryGetBool(TmpValue)) { AutoAcceptOutstandingApplication = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FInviteToGroupResponse::~FInviteToGroupResponse()
{
    //if (Group != nullptr) delete Group;
    //if (InvitedByEntity != nullptr) delete InvitedByEntity;
    //if (InvitedEntity != nullptr) delete InvitedEntity;

}

void PlayFab::EntityModels::FInviteToGroupResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Expires")); writeDatetime(Expires, writer);

    if (Group.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Group")); Group->writeJSON(writer); }

    if (InvitedByEntity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("InvitedByEntity")); InvitedByEntity->writeJSON(writer); }

    if (InvitedEntity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("InvitedEntity")); InvitedEntity->writeJSON(writer); }

    if (RoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleId")); writer->WriteValue(RoleId); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FInviteToGroupResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ExpiresValue = obj->TryGetField(TEXT("Expires"));
    if (ExpiresValue.IsValid())
        Expires = readDatetime(ExpiresValue);


    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = MakeShareable(new FEntityKey(GroupValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> InvitedByEntityValue = obj->TryGetField(TEXT("InvitedByEntity"));
    if (InvitedByEntityValue.IsValid() && !InvitedByEntityValue->IsNull())
    {
        InvitedByEntity = MakeShareable(new FEntityWithLineage(InvitedByEntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> InvitedEntityValue = obj->TryGetField(TEXT("InvitedEntity"));
    if (InvitedEntityValue.IsValid() && !InvitedEntityValue->IsNull())
    {
        InvitedEntity = MakeShareable(new FEntityWithLineage(InvitedEntityValue->AsObject()));
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FIsMemberRequest::~FIsMemberRequest()
{

}

void PlayFab::EntityModels::FIsMemberRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    if (RoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleId")); writer->WriteValue(RoleId); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FIsMemberRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FIsMemberResponse::~FIsMemberResponse()
{

}

void PlayFab::EntityModels::FIsMemberResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("IsMember")); writer->WriteValue(IsMember);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FIsMemberResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> IsMemberValue = obj->TryGetField(TEXT("IsMember"));
    if (IsMemberValue.IsValid() && !IsMemberValue->IsNull())
    {
        bool TmpValue;
        if (IsMemberValue->TryGetBool(TmpValue)) { IsMember = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FListGroupApplicationsRequest::~FListGroupApplicationsRequest()
{

}

void PlayFab::EntityModels::FListGroupApplicationsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FListGroupApplicationsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FListGroupApplicationsResponse::~FListGroupApplicationsResponse()
{

}

void PlayFab::EntityModels::FListGroupApplicationsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Applications.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Applications"));
        for (const FGroupApplication& item : Applications)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FListGroupApplicationsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ApplicationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Applications"));
    for (int32 Idx = 0; Idx < ApplicationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ApplicationsArray[Idx];
        Applications.Add(FGroupApplication(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FListGroupBlocksRequest::~FListGroupBlocksRequest()
{

}

void PlayFab::EntityModels::FListGroupBlocksRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FListGroupBlocksRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FListGroupBlocksResponse::~FListGroupBlocksResponse()
{

}

void PlayFab::EntityModels::FListGroupBlocksResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (BlockedEntities.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("BlockedEntities"));
        for (const FGroupBlock& item : BlockedEntities)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FListGroupBlocksResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&BlockedEntitiesArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("BlockedEntities"));
    for (int32 Idx = 0; Idx < BlockedEntitiesArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = BlockedEntitiesArray[Idx];
        BlockedEntities.Add(FGroupBlock(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FListGroupInvitationsRequest::~FListGroupInvitationsRequest()
{

}

void PlayFab::EntityModels::FListGroupInvitationsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FListGroupInvitationsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FListGroupInvitationsResponse::~FListGroupInvitationsResponse()
{

}

void PlayFab::EntityModels::FListGroupInvitationsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Invitations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Invitations"));
        for (const FGroupInvitation& item : Invitations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FListGroupInvitationsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&InvitationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Invitations"));
    for (int32 Idx = 0; Idx < InvitationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = InvitationsArray[Idx];
        Invitations.Add(FGroupInvitation(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FListGroupMembersRequest::~FListGroupMembersRequest()
{

}

void PlayFab::EntityModels::FListGroupMembersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FListGroupMembersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FListGroupMembersResponse::~FListGroupMembersResponse()
{

}

void PlayFab::EntityModels::FListGroupMembersResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Members.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Members"));
        for (const FEntityMemberRole& item : Members)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FListGroupMembersResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&MembersArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Members"));
    for (int32 Idx = 0; Idx < MembersArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = MembersArray[Idx];
        Members.Add(FEntityMemberRole(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FListMembershipOpportunitiesRequest::~FListMembershipOpportunitiesRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FListMembershipOpportunitiesRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FListMembershipOpportunitiesRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FListMembershipOpportunitiesResponse::~FListMembershipOpportunitiesResponse()
{

}

void PlayFab::EntityModels::FListMembershipOpportunitiesResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Applications.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Applications"));
        for (const FGroupApplication& item : Applications)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    if (Invitations.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Invitations"));
        for (const FGroupInvitation& item : Invitations)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FListMembershipOpportunitiesResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&ApplicationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Applications"));
    for (int32 Idx = 0; Idx < ApplicationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ApplicationsArray[Idx];
        Applications.Add(FGroupApplication(CurrentItem->AsObject()));
    }


    const TArray<TSharedPtr<FJsonValue>>&InvitationsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Invitations"));
    for (int32 Idx = 0; Idx < InvitationsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = InvitationsArray[Idx];
        Invitations.Add(FGroupInvitation(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FListMembershipRequest::~FListMembershipRequest()
{
    //if (Entity != nullptr) delete Entity;

}

void PlayFab::EntityModels::FListMembershipRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Entity.IsValid()) { writer->WriteIdentifierPrefix(TEXT("Entity")); Entity->writeJSON(writer); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FListMembershipRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = MakeShareable(new FEntityKey(EntityValue->AsObject()));
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FListMembershipResponse::~FListMembershipResponse()
{

}

void PlayFab::EntityModels::FListMembershipResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Groups.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Groups"));
        for (const FGroupWithRoles& item : Groups)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FListMembershipResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&GroupsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Groups"));
    for (int32 Idx = 0; Idx < GroupsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = GroupsArray[Idx];
        Groups.Add(FGroupWithRoles(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

void PlayFab::EntityModels::writeOperationTypesEnumJSON(OperationTypes enumVal, JsonWriter& writer)
{
    switch (enumVal)
    {

    case OperationTypesCreated: writer->WriteValue(TEXT("Created")); break;
    case OperationTypesUpdated: writer->WriteValue(TEXT("Updated")); break;
    case OperationTypesDeleted: writer->WriteValue(TEXT("Deleted")); break;
    case OperationTypesNone: writer->WriteValue(TEXT("None")); break;
    }
}

EntityModels::OperationTypes PlayFab::EntityModels::readOperationTypesFromValue(const TSharedPtr<FJsonValue>& value)
{
    return readOperationTypesFromValue(value.IsValid() ? value->AsString() : "");
}

EntityModels::OperationTypes PlayFab::EntityModels::readOperationTypesFromValue(const FString& value)
{
    static TMap<FString, OperationTypes> _OperationTypesMap;
    if (_OperationTypesMap.Num() == 0)
    {
        // Auto-generate the map on the first use
        _OperationTypesMap.Add(TEXT("Created"), OperationTypesCreated);
        _OperationTypesMap.Add(TEXT("Updated"), OperationTypesUpdated);
        _OperationTypesMap.Add(TEXT("Deleted"), OperationTypesDeleted);
        _OperationTypesMap.Add(TEXT("None"), OperationTypesNone);

    }

    if (!value.IsEmpty())
    {
        auto output = _OperationTypesMap.Find(value);
        if (output != nullptr)
            return *output;
    }

    return OperationTypesCreated; // Basically critical fail
}

PlayFab::EntityModels::FRemoveGroupApplicationRequest::~FRemoveGroupApplicationRequest()
{

}

void PlayFab::EntityModels::FRemoveGroupApplicationRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FRemoveGroupApplicationRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FRemoveGroupInvitationRequest::~FRemoveGroupInvitationRequest()
{

}

void PlayFab::EntityModels::FRemoveGroupInvitationRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FRemoveGroupInvitationRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FRemoveMembersRequest::~FRemoveMembersRequest()
{

}

void PlayFab::EntityModels::FRemoveMembersRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteArrayStart(TEXT("Members"));
    for (const FEntityKey& item : Members)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    if (RoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleId")); writer->WriteValue(RoleId); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FRemoveMembersRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TArray<TSharedPtr<FJsonValue>>&MembersArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Members"));
    for (int32 Idx = 0; Idx < MembersArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = MembersArray[Idx];
        Members.Add(FEntityKey(CurrentItem->AsObject()));
    }


    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FSetEntityProfilePolicyRequest::~FSetEntityProfilePolicyRequest()
{

}

void PlayFab::EntityModels::FSetEntityProfilePolicyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    if (Statements.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Statements"));
        for (const FEntityPermissionStatement& item : Statements)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FSetEntityProfilePolicyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TArray<TSharedPtr<FJsonValue>>&StatementsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Statements"));
    for (int32 Idx = 0; Idx < StatementsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = StatementsArray[Idx];
        Statements.Add(FEntityPermissionStatement(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FSetEntityProfilePolicyResponse::~FSetEntityProfilePolicyResponse()
{

}

void PlayFab::EntityModels::FSetEntityProfilePolicyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Permissions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Permissions"));
        for (const FEntityPermissionStatement& item : Permissions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FSetEntityProfilePolicyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&PermissionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Permissions"));
    for (int32 Idx = 0; Idx < PermissionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PermissionsArray[Idx];
        Permissions.Add(FEntityPermissionStatement(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FSetGlobalPolicyRequest::~FSetGlobalPolicyRequest()
{

}

void PlayFab::EntityModels::FSetGlobalPolicyRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (Permissions.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("Permissions"));
        for (const FEntityPermissionStatement& item : Permissions)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FSetGlobalPolicyRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TArray<TSharedPtr<FJsonValue>>&PermissionsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Permissions"));
    for (int32 Idx = 0; Idx < PermissionsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = PermissionsArray[Idx];
        Permissions.Add(FEntityPermissionStatement(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FSetGlobalPolicyResponse::~FSetGlobalPolicyResponse()
{

}

void PlayFab::EntityModels::FSetGlobalPolicyResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FSetGlobalPolicyResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    return HasSucceeded;
}

PlayFab::EntityModels::FSetObject::~FSetObject()
{

}

void PlayFab::EntityModels::FSetObject::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (DataObject.notNull()) { writer->WriteIdentifierPrefix(TEXT("DataObject")); DataObject.writeJSON(writer); }

    if (DeleteObject.notNull()) { writer->WriteIdentifierPrefix(TEXT("DeleteObject")); writer->WriteValue(DeleteObject); }

    if (EscapedDataObject.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("EscapedDataObject")); writer->WriteValue(EscapedDataObject); }

    writer->WriteIdentifierPrefix(TEXT("ObjectName")); writer->WriteValue(ObjectName);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FSetObject::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> DataObjectValue = obj->TryGetField(TEXT("DataObject"));
    if (DataObjectValue.IsValid() && !DataObjectValue->IsNull())
    {
        DataObject = FJsonKeeper(DataObjectValue);
    }

    const TSharedPtr<FJsonValue> DeleteObjectValue = obj->TryGetField(TEXT("DeleteObject"));
    if (DeleteObjectValue.IsValid() && !DeleteObjectValue->IsNull())
    {
        bool TmpValue;
        if (DeleteObjectValue->TryGetBool(TmpValue)) { DeleteObject = TmpValue; }
    }

    const TSharedPtr<FJsonValue> EscapedDataObjectValue = obj->TryGetField(TEXT("EscapedDataObject"));
    if (EscapedDataObjectValue.IsValid() && !EscapedDataObjectValue->IsNull())
    {
        FString TmpValue;
        if (EscapedDataObjectValue->TryGetString(TmpValue)) { EscapedDataObject = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ObjectNameValue = obj->TryGetField(TEXT("ObjectName"));
    if (ObjectNameValue.IsValid() && !ObjectNameValue->IsNull())
    {
        FString TmpValue;
        if (ObjectNameValue->TryGetString(TmpValue)) { ObjectName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FSetObjectInfo::~FSetObjectInfo()
{

}

void PlayFab::EntityModels::FSetObjectInfo::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ObjectName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("ObjectName")); writer->WriteValue(ObjectName); }

    if (OperationReason.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("OperationReason")); writer->WriteValue(OperationReason); }

    if (SetResult.notNull()) { writer->WriteIdentifierPrefix(TEXT("SetResult")); writeOperationTypesEnumJSON(SetResult, writer); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FSetObjectInfo::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ObjectNameValue = obj->TryGetField(TEXT("ObjectName"));
    if (ObjectNameValue.IsValid() && !ObjectNameValue->IsNull())
    {
        FString TmpValue;
        if (ObjectNameValue->TryGetString(TmpValue)) { ObjectName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> OperationReasonValue = obj->TryGetField(TEXT("OperationReason"));
    if (OperationReasonValue.IsValid() && !OperationReasonValue->IsNull())
    {
        FString TmpValue;
        if (OperationReasonValue->TryGetString(TmpValue)) { OperationReason = TmpValue; }
    }

    SetResult = readOperationTypesFromValue(obj->TryGetField(TEXT("SetResult")));

    return HasSucceeded;
}

PlayFab::EntityModels::FSetObjectsRequest::~FSetObjectsRequest()
{

}

void PlayFab::EntityModels::FSetObjectsRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    if (ExpectedProfileVersion.notNull()) { writer->WriteIdentifierPrefix(TEXT("ExpectedProfileVersion")); writer->WriteValue(ExpectedProfileVersion); }

    writer->WriteArrayStart(TEXT("Objects"));
    for (const FSetObject& item : Objects)
        item.writeJSON(writer);
    writer->WriteArrayEnd();


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FSetObjectsRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> ExpectedProfileVersionValue = obj->TryGetField(TEXT("ExpectedProfileVersion"));
    if (ExpectedProfileVersionValue.IsValid() && !ExpectedProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ExpectedProfileVersionValue->TryGetNumber(TmpValue)) { ExpectedProfileVersion = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&ObjectsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("Objects"));
    for (int32 Idx = 0; Idx < ObjectsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = ObjectsArray[Idx];
        Objects.Add(FSetObject(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FSetObjectsResponse::~FSetObjectsResponse()
{

}

void PlayFab::EntityModels::FSetObjectsResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion);

    if (SetResults.Num() != 0)
    {
        writer->WriteArrayStart(TEXT("SetResults"));
        for (const FSetObjectInfo& item : SetResults)
            item.writeJSON(writer);
        writer->WriteArrayEnd();
    }


    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FSetObjectsResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    const TArray<TSharedPtr<FJsonValue>>&SetResultsArray = FPlayFabJsonHelpers::ReadArray(obj, TEXT("SetResults"));
    for (int32 Idx = 0; Idx < SetResultsArray.Num(); Idx++)
    {
        TSharedPtr<FJsonValue> CurrentItem = SetResultsArray[Idx];
        SetResults.Add(FSetObjectInfo(CurrentItem->AsObject()));
    }


    return HasSucceeded;
}

PlayFab::EntityModels::FUnblockEntityRequest::~FUnblockEntityRequest()
{

}

void PlayFab::EntityModels::FUnblockEntityRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    writer->WriteIdentifierPrefix(TEXT("Entity")); Entity.writeJSON(writer);

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FUnblockEntityRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> EntityValue = obj->TryGetField(TEXT("Entity"));
    if (EntityValue.IsValid() && !EntityValue->IsNull())
    {
        Entity = FEntityKey(EntityValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FUpdateGroupRequest::~FUpdateGroupRequest()
{

}

void PlayFab::EntityModels::FUpdateGroupRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (AdminRoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("AdminRoleId")); writer->WriteValue(AdminRoleId); }

    if (ExpectedProfileVersion.notNull()) { writer->WriteIdentifierPrefix(TEXT("ExpectedProfileVersion")); writer->WriteValue(ExpectedProfileVersion); }

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    if (GroupName.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("GroupName")); writer->WriteValue(GroupName); }

    if (MemberRoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("MemberRoleId")); writer->WriteValue(MemberRoleId); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FUpdateGroupRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> AdminRoleIdValue = obj->TryGetField(TEXT("AdminRoleId"));
    if (AdminRoleIdValue.IsValid() && !AdminRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (AdminRoleIdValue->TryGetString(TmpValue)) { AdminRoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ExpectedProfileVersionValue = obj->TryGetField(TEXT("ExpectedProfileVersion"));
    if (ExpectedProfileVersionValue.IsValid() && !ExpectedProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ExpectedProfileVersionValue->TryGetNumber(TmpValue)) { ExpectedProfileVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> GroupNameValue = obj->TryGetField(TEXT("GroupName"));
    if (GroupNameValue.IsValid() && !GroupNameValue->IsNull())
    {
        FString TmpValue;
        if (GroupNameValue->TryGetString(TmpValue)) { GroupName = TmpValue; }
    }

    const TSharedPtr<FJsonValue> MemberRoleIdValue = obj->TryGetField(TEXT("MemberRoleId"));
    if (MemberRoleIdValue.IsValid() && !MemberRoleIdValue->IsNull())
    {
        FString TmpValue;
        if (MemberRoleIdValue->TryGetString(TmpValue)) { MemberRoleId = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FUpdateGroupResponse::~FUpdateGroupResponse()
{

}

void PlayFab::EntityModels::FUpdateGroupResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (OperationReason.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("OperationReason")); writer->WriteValue(OperationReason); }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion);

    if (SetResult.notNull()) { writer->WriteIdentifierPrefix(TEXT("SetResult")); writeOperationTypesEnumJSON(SetResult, writer); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FUpdateGroupResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> OperationReasonValue = obj->TryGetField(TEXT("OperationReason"));
    if (OperationReasonValue.IsValid() && !OperationReasonValue->IsNull())
    {
        FString TmpValue;
        if (OperationReasonValue->TryGetString(TmpValue)) { OperationReason = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    SetResult = readOperationTypesFromValue(obj->TryGetField(TEXT("SetResult")));

    return HasSucceeded;
}

PlayFab::EntityModels::FUpdateGroupRoleRequest::~FUpdateGroupRoleRequest()
{

}

void PlayFab::EntityModels::FUpdateGroupRoleRequest::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (ExpectedProfileVersion.notNull()) { writer->WriteIdentifierPrefix(TEXT("ExpectedProfileVersion")); writer->WriteValue(ExpectedProfileVersion); }

    writer->WriteIdentifierPrefix(TEXT("Group")); Group.writeJSON(writer);

    if (RoleId.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("RoleId")); writer->WriteValue(RoleId); }

    writer->WriteIdentifierPrefix(TEXT("RoleName")); writer->WriteValue(RoleName);

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FUpdateGroupRoleRequest::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> ExpectedProfileVersionValue = obj->TryGetField(TEXT("ExpectedProfileVersion"));
    if (ExpectedProfileVersionValue.IsValid() && !ExpectedProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ExpectedProfileVersionValue->TryGetNumber(TmpValue)) { ExpectedProfileVersion = TmpValue; }
    }

    const TSharedPtr<FJsonValue> GroupValue = obj->TryGetField(TEXT("Group"));
    if (GroupValue.IsValid() && !GroupValue->IsNull())
    {
        Group = FEntityKey(GroupValue->AsObject());
    }

    const TSharedPtr<FJsonValue> RoleIdValue = obj->TryGetField(TEXT("RoleId"));
    if (RoleIdValue.IsValid() && !RoleIdValue->IsNull())
    {
        FString TmpValue;
        if (RoleIdValue->TryGetString(TmpValue)) { RoleId = TmpValue; }
    }

    const TSharedPtr<FJsonValue> RoleNameValue = obj->TryGetField(TEXT("RoleName"));
    if (RoleNameValue.IsValid() && !RoleNameValue->IsNull())
    {
        FString TmpValue;
        if (RoleNameValue->TryGetString(TmpValue)) { RoleName = TmpValue; }
    }

    return HasSucceeded;
}

PlayFab::EntityModels::FUpdateGroupRoleResponse::~FUpdateGroupRoleResponse()
{

}

void PlayFab::EntityModels::FUpdateGroupRoleResponse::writeJSON(JsonWriter& writer) const
{
    writer->WriteObjectStart();

    if (OperationReason.IsEmpty() == false) { writer->WriteIdentifierPrefix(TEXT("OperationReason")); writer->WriteValue(OperationReason); }

    writer->WriteIdentifierPrefix(TEXT("ProfileVersion")); writer->WriteValue(ProfileVersion);

    if (SetResult.notNull()) { writer->WriteIdentifierPrefix(TEXT("SetResult")); writeOperationTypesEnumJSON(SetResult, writer); }

    writer->WriteObjectEnd();
}

bool PlayFab::EntityModels::FUpdateGroupRoleResponse::readFromValue(const TSharedPtr<FJsonObject>& obj)
{
    bool HasSucceeded = true;

    const TSharedPtr<FJsonValue> OperationReasonValue = obj->TryGetField(TEXT("OperationReason"));
    if (OperationReasonValue.IsValid() && !OperationReasonValue->IsNull())
    {
        FString TmpValue;
        if (OperationReasonValue->TryGetString(TmpValue)) { OperationReason = TmpValue; }
    }

    const TSharedPtr<FJsonValue> ProfileVersionValue = obj->TryGetField(TEXT("ProfileVersion"));
    if (ProfileVersionValue.IsValid() && !ProfileVersionValue->IsNull())
    {
        int32 TmpValue;
        if (ProfileVersionValue->TryGetNumber(TmpValue)) { ProfileVersion = TmpValue; }
    }

    SetResult = readOperationTypesFromValue(obj->TryGetField(TEXT("SetResult")));

    return HasSucceeded;
}

