// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "Core/PlayFabEntityAPI.h"
#include "Core/PlayFabSettings.h"
#include "Core/PlayFabResultHandler.h"
#include "PlayFab.h"

using namespace PlayFab;
using namespace PlayFab::EntityModels;

UPlayFabEntityAPI::UPlayFabEntityAPI() {}

UPlayFabEntityAPI::~UPlayFabEntityAPI() {}

int UPlayFabEntityAPI::GetPendingCalls() const
{
    return PlayFabRequestHandler::GetPendingCalls();
}

FString UPlayFabEntityAPI::GetBuildIdentifier() const
{
    return PlayFabSettings::buildIdentifier;
}

void UPlayFabEntityAPI::SetTitleId(const FString& titleId)
{
    PlayFabSettings::titleId = titleId;
}

void UPlayFabEntityAPI::SetDevSecretKey(const FString& developerSecretKey)
{
    PlayFabSettings::developerSecretKey = developerSecretKey;
}

bool UPlayFabEntityAPI::AbortFileUploads(
    EntityModels::FAbortFileUploadsRequest& request,
    const FAbortFileUploadsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/File/AbortFileUploads")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnAbortFileUploadsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnAbortFileUploadsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAbortFileUploadsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FAbortFileUploadsResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::AcceptGroupApplication(
    EntityModels::FAcceptGroupApplicationRequest& request,
    const FAcceptGroupApplicationDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/AcceptGroupApplication")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnAcceptGroupApplicationResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnAcceptGroupApplicationResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAcceptGroupApplicationDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FEmptyResult outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::AcceptGroupInvitation(
    EntityModels::FAcceptGroupInvitationRequest& request,
    const FAcceptGroupInvitationDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/AcceptGroupInvitation")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnAcceptGroupInvitationResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnAcceptGroupInvitationResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAcceptGroupInvitationDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FEmptyResult outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::AddMembers(
    EntityModels::FAddMembersRequest& request,
    const FAddMembersDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/AddMembers")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnAddMembersResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnAddMembersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddMembersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FEmptyResult outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::ApplyToGroup(
    EntityModels::FApplyToGroupRequest& request,
    const FApplyToGroupDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/ApplyToGroup")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnApplyToGroupResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnApplyToGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FApplyToGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FApplyToGroupResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::BlockEntity(
    EntityModels::FBlockEntityRequest& request,
    const FBlockEntityDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/BlockEntity")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnBlockEntityResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnBlockEntityResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBlockEntityDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FEmptyResult outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::ChangeMemberRole(
    EntityModels::FChangeMemberRoleRequest& request,
    const FChangeMemberRoleDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/ChangeMemberRole")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnChangeMemberRoleResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnChangeMemberRoleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FChangeMemberRoleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FEmptyResult outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::CreateGroup(
    EntityModels::FCreateGroupRequest& request,
    const FCreateGroupDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/CreateGroup")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnCreateGroupResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnCreateGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FCreateGroupResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::CreateRole(
    EntityModels::FCreateGroupRoleRequest& request,
    const FCreateRoleDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/CreateRole")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnCreateRoleResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnCreateRoleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateRoleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FCreateGroupRoleResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::DeleteFiles(
    EntityModels::FDeleteFilesRequest& request,
    const FDeleteFilesDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/File/DeleteFiles")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnDeleteFilesResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnDeleteFilesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteFilesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FDeleteFilesResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::DeleteGroup(
    EntityModels::FDeleteGroupRequest& request,
    const FDeleteGroupDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/DeleteGroup")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnDeleteGroupResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnDeleteGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FEmptyResult outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::DeleteRole(
    EntityModels::FDeleteRoleRequest& request,
    const FDeleteRoleDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/DeleteRole")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnDeleteRoleResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnDeleteRoleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteRoleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FEmptyResult outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::FinalizeFileUploads(
    EntityModels::FFinalizeFileUploadsRequest& request,
    const FFinalizeFileUploadsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/File/FinalizeFileUploads")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnFinalizeFileUploadsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnFinalizeFileUploadsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FFinalizeFileUploadsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FFinalizeFileUploadsResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::GetEntityToken(
    EntityModels::FGetEntityTokenRequest& request,
    const FGetEntityTokenDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    FString authKey; FString authValue;
    if (PlayFabSettings::entityToken.Len() > 0) {
        authKey = TEXT("X-EntityToken"); authValue = PlayFabSettings::entityToken;
    } else if (PlayFabSettings::clientSessionTicket.Len() > 0) {
        authKey = TEXT("X-Authorization"); authValue = PlayFabSettings::clientSessionTicket;
    } else if (PlayFabSettings::developerSecretKey.Len() > 0) {
        authKey = TEXT("X-SecretKey"); authValue = PlayFabSettings::developerSecretKey;
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Authentication/GetEntityToken")), request.toJSONString(), authKey, authValue);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnGetEntityTokenResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnGetEntityTokenResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetEntityTokenDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FGetEntityTokenResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        if (outResult.EntityToken.Len() > 0)
            PlayFabSettings::entityToken = outResult.EntityToken;

        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::GetFiles(
    EntityModels::FGetFilesRequest& request,
    const FGetFilesDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/File/GetFiles")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnGetFilesResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnGetFilesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFilesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FGetFilesResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::GetGlobalPolicy(
    
    const FGetGlobalPolicyDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Profile/GetGlobalPolicy")), TEXT("{}"), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnGetGlobalPolicyResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnGetGlobalPolicyResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetGlobalPolicyDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FGetGlobalPolicyResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::GetGroup(
    EntityModels::FGetGroupRequest& request,
    const FGetGroupDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/GetGroup")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnGetGroupResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnGetGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FGetGroupResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::GetObjects(
    EntityModels::FGetObjectsRequest& request,
    const FGetObjectsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Object/GetObjects")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnGetObjectsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnGetObjectsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetObjectsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FGetObjectsResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::GetProfile(
    EntityModels::FGetEntityProfileRequest& request,
    const FGetProfileDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Profile/GetProfile")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnGetProfileResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnGetProfileResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetProfileDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FGetEntityProfileResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::GetProfiles(
    EntityModels::FGetEntityProfilesRequest& request,
    const FGetProfilesDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Profile/GetProfiles")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnGetProfilesResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnGetProfilesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetProfilesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FGetEntityProfilesResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::InitiateFileUploads(
    EntityModels::FInitiateFileUploadsRequest& request,
    const FInitiateFileUploadsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/File/InitiateFileUploads")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnInitiateFileUploadsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnInitiateFileUploadsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FInitiateFileUploadsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FInitiateFileUploadsResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::InviteToGroup(
    EntityModels::FInviteToGroupRequest& request,
    const FInviteToGroupDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/InviteToGroup")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnInviteToGroupResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnInviteToGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FInviteToGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FInviteToGroupResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::IsMember(
    EntityModels::FIsMemberRequest& request,
    const FIsMemberDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/IsMember")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnIsMemberResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnIsMemberResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FIsMemberDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FIsMemberResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::ListGroupApplications(
    EntityModels::FListGroupApplicationsRequest& request,
    const FListGroupApplicationsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/ListGroupApplications")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnListGroupApplicationsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnListGroupApplicationsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListGroupApplicationsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FListGroupApplicationsResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::ListGroupBlocks(
    EntityModels::FListGroupBlocksRequest& request,
    const FListGroupBlocksDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/ListGroupBlocks")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnListGroupBlocksResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnListGroupBlocksResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListGroupBlocksDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FListGroupBlocksResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::ListGroupInvitations(
    EntityModels::FListGroupInvitationsRequest& request,
    const FListGroupInvitationsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/ListGroupInvitations")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnListGroupInvitationsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnListGroupInvitationsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListGroupInvitationsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FListGroupInvitationsResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::ListGroupMembers(
    EntityModels::FListGroupMembersRequest& request,
    const FListGroupMembersDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/ListGroupMembers")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnListGroupMembersResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnListGroupMembersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListGroupMembersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FListGroupMembersResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::ListMembership(
    EntityModels::FListMembershipRequest& request,
    const FListMembershipDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/ListMembership")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnListMembershipResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnListMembershipResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListMembershipDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FListMembershipResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::ListMembershipOpportunities(
    EntityModels::FListMembershipOpportunitiesRequest& request,
    const FListMembershipOpportunitiesDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/ListMembershipOpportunities")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnListMembershipOpportunitiesResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnListMembershipOpportunitiesResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListMembershipOpportunitiesDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FListMembershipOpportunitiesResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::RemoveGroupApplication(
    EntityModels::FRemoveGroupApplicationRequest& request,
    const FRemoveGroupApplicationDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/RemoveGroupApplication")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnRemoveGroupApplicationResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnRemoveGroupApplicationResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveGroupApplicationDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FEmptyResult outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::RemoveGroupInvitation(
    EntityModels::FRemoveGroupInvitationRequest& request,
    const FRemoveGroupInvitationDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/RemoveGroupInvitation")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnRemoveGroupInvitationResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnRemoveGroupInvitationResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveGroupInvitationDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FEmptyResult outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::RemoveMembers(
    EntityModels::FRemoveMembersRequest& request,
    const FRemoveMembersDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/RemoveMembers")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnRemoveMembersResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnRemoveMembersResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveMembersDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FEmptyResult outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::SetGlobalPolicy(
    EntityModels::FSetGlobalPolicyRequest& request,
    const FSetGlobalPolicyDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Profile/SetGlobalPolicy")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnSetGlobalPolicyResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnSetGlobalPolicyResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetGlobalPolicyDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FSetGlobalPolicyResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::SetObjects(
    EntityModels::FSetObjectsRequest& request,
    const FSetObjectsDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Object/SetObjects")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnSetObjectsResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnSetObjectsResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetObjectsDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FSetObjectsResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::SetProfilePolicy(
    EntityModels::FSetEntityProfilePolicyRequest& request,
    const FSetProfilePolicyDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Profile/SetProfilePolicy")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnSetProfilePolicyResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnSetProfilePolicyResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSetProfilePolicyDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FSetEntityProfilePolicyResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::UnblockEntity(
    EntityModels::FUnblockEntityRequest& request,
    const FUnblockEntityDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/UnblockEntity")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnUnblockEntityResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnUnblockEntityResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnblockEntityDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FEmptyResult outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::UpdateGroup(
    EntityModels::FUpdateGroupRequest& request,
    const FUpdateGroupDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/UpdateGroup")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnUpdateGroupResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnUpdateGroupResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateGroupDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FUpdateGroupResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

bool UPlayFabEntityAPI::UpdateRole(
    EntityModels::FUpdateGroupRoleRequest& request,
    const FUpdateRoleDelegate& SuccessDelegate,
    const FPlayFabErrorDelegate& ErrorDelegate)
{
    if (PlayFabSettings::entityToken.Len() == 0) {
        UE_LOG(LogPlayFab, Error, TEXT("You must call GetEntityToken API Method before calling this function."));
    }
    auto HttpRequest = PlayFabRequestHandler::SendRequest(PlayFabSettings::getURL(TEXT("/Group/UpdateRole")), request.toJSONString(), TEXT("X-EntityToken"), PlayFabSettings::entityToken);
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &UPlayFabEntityAPI::OnUpdateRoleResult, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void UPlayFabEntityAPI::OnUpdateRoleResult(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateRoleDelegate SuccessDelegate, FPlayFabErrorDelegate ErrorDelegate)
{
    EntityModels::FUpdateGroupRoleResponse outResult;
    FPlayFabError errorResult;
    if (PlayFabRequestHandler::DecodeRequest(HttpRequest, HttpResponse, bSucceeded, outResult, errorResult))
    {
        SuccessDelegate.ExecuteIfBound(outResult);
    }
    else
    {
        ErrorDelegate.ExecuteIfBound(errorResult);
    }
}

